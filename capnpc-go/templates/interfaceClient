{{with .Annotations.Doc -}}
// {{.}}
{{end -}}
type {{.Node.Name}} capnp.Client

{{ template "_typeid" .Node }}

{{range .Methods -}}
func (c {{$.Node.Name}}) {{.Name|title}}(ctx {{$.G.Imports.Context}}.Context, params func({{$.G.RemoteNodeName .Params $.Node}}) error) ({{$.G.RemoteNodeName .Results $.Node}}_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			{{template "_interfaceMethod" .}}
		},
	}
	if params != nil {
		s.ArgsSize = {{$.G.ObjectSize .Params}}
		s.PlaceArgs = func(s capnp.Struct) error { return params({{$.G.RemoteNodeName .Params $.Node}}(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return {{$.G.RemoteNodeName .Results $.Node}}_Future{Future: ans.Future()}, release
}
{{end}}

func (c {{$.Node.Name}}) AddRef() {{$.Node.Name}} {
	return {{$.Node.Name}}(capnp.Client(c).AddRef())
}

func (c {{$.Node.Name}}) Release() {
	capnp.Client(c).Release()
}

func (c {{$.Node.Name}}) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func ({{$.Node.Name}}) DecodeFromPtr(p capnp.Ptr) {{$.Node.Name}} {
	return {{$.Node.Name}}(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c {{$.Node.Name}}) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c {{$.Node.Name}}) SetFlowLimiter(lim flowcontrol.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}
