{{ template "_typeid" .Node }}

func New{{.Node.Name}}(s *capnp.Segment) ({{.Node.Name}}, error) {
	st, err := capnp.NewStruct(s, {{.G.ObjectSize .Node}})
	return {{.Node.Name}}(st), err
}

func NewRoot{{.Node.Name}}(s *capnp.Segment) ({{.Node.Name}}, error) {
	st, err := capnp.NewRootStruct(s, {{.G.ObjectSize .Node}})
	return {{.Node.Name}}(st), err
}

func ReadRoot{{.Node.Name}}(msg *capnp.Message) ({{.Node.Name}}, error) {
	root, err := msg.Root()
	return {{.Node.Name}}(root.Struct()), err
}
{{if .StringMethod}}
func (s {{.Node.Name}}) String() string {
	str, _ := {{.G.Imports.Text}}.Marshal({{.Node.Id|printf "%#x"}}, capnp.Struct(s))
	return str
}
{{end}}

func (s {{.Node.Name}}) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func ({{.Node.Name}}) DecodeFromPtr(p capnp.Ptr) {{.Node.Name}} {
	return {{.Node.Name}}(capnp.Struct{}.DecodeFromPtr(p))
}

func (s {{.Node.Name}}) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
