// Code generated by capnpc-go. DO NOT EDIT.

package hashes

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type HashFactory struct{ Client *capnp.Client }

// HashFactory_TypeID is the unique identifier for the type HashFactory.
const HashFactory_TypeID = 0xaead580f97fddabc

func (c HashFactory) NewSha1(ctx context.Context, params func(HashFactory_newSha1_Params) error) (HashFactory_newSha1_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xaead580f97fddabc,
			MethodID:      0,
			InterfaceName: "hashes.capnp:HashFactory",
			MethodName:    "newSha1",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(HashFactory_newSha1_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return HashFactory_newSha1_Results_Future{Future: ans.Future()}, release
}

func (c HashFactory) AddRef() HashFactory {
	return HashFactory{
		Client: c.Client.AddRef(),
	}
}

func (c HashFactory) Release() {
	c.Client.Release()
}

// A HashFactory_Server is a HashFactory with a local implementation.
type HashFactory_Server interface {
	NewSha1(context.Context, HashFactory_newSha1) error
}

// HashFactory_NewServer creates a new Server from an implementation of HashFactory_Server.
func HashFactory_NewServer(s HashFactory_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(HashFactory_Methods(nil, s), s, c, policy)
}

// HashFactory_ServerToClient creates a new Client from an implementation of HashFactory_Server.
// The caller is responsible for calling Release on the returned Client.
func HashFactory_ServerToClient(s HashFactory_Server, policy *server.Policy) HashFactory {
	return HashFactory{Client: capnp.NewClient(HashFactory_NewServer(s, policy))}
}

// HashFactory_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func HashFactory_Methods(methods []server.Method, s HashFactory_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaead580f97fddabc,
			MethodID:      0,
			InterfaceName: "hashes.capnp:HashFactory",
			MethodName:    "newSha1",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NewSha1(ctx, HashFactory_newSha1{call})
		},
	})

	return methods
}

// HashFactory_newSha1 holds the state for a server call to HashFactory.newSha1.
// See server.Call for documentation.
type HashFactory_newSha1 struct {
	*server.Call
}

// Args returns the call's arguments.
func (c HashFactory_newSha1) Args() HashFactory_newSha1_Params {
	return HashFactory_newSha1_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c HashFactory_newSha1) AllocResults() (HashFactory_newSha1_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HashFactory_newSha1_Results{Struct: r}, err
}

type HashFactory_newSha1_Params struct{ capnp.Struct }

// HashFactory_newSha1_Params_TypeID is the unique identifier for the type HashFactory_newSha1_Params.
const HashFactory_newSha1_Params_TypeID = 0x92b20ad1a58ca0ca

func NewHashFactory_newSha1_Params(s *capnp.Segment) (HashFactory_newSha1_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return HashFactory_newSha1_Params{st}, err
}

func NewRootHashFactory_newSha1_Params(s *capnp.Segment) (HashFactory_newSha1_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return HashFactory_newSha1_Params{st}, err
}

func ReadRootHashFactory_newSha1_Params(msg *capnp.Message) (HashFactory_newSha1_Params, error) {
	root, err := msg.Root()
	return HashFactory_newSha1_Params{root.Struct()}, err
}

func (s HashFactory_newSha1_Params) String() string {
	str, _ := text.Marshal(0x92b20ad1a58ca0ca, s.Struct)
	return str
}

// HashFactory_newSha1_Params_List is a list of HashFactory_newSha1_Params.
type HashFactory_newSha1_Params_List struct{ capnp.List }

// NewHashFactory_newSha1_Params creates a new list of HashFactory_newSha1_Params.
func NewHashFactory_newSha1_Params_List(s *capnp.Segment, sz int32) (HashFactory_newSha1_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return HashFactory_newSha1_Params_List{l}, err
}

func (s HashFactory_newSha1_Params_List) At(i int) HashFactory_newSha1_Params {
	return HashFactory_newSha1_Params{s.List.Struct(i)}
}

func (s HashFactory_newSha1_Params_List) Set(i int, v HashFactory_newSha1_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s HashFactory_newSha1_Params_List) String() string {
	str, _ := text.MarshalList(0x92b20ad1a58ca0ca, s.List)
	return str
}

// HashFactory_newSha1_Params_Future is a wrapper for a HashFactory_newSha1_Params promised by a client call.
type HashFactory_newSha1_Params_Future struct{ *capnp.Future }

func (p HashFactory_newSha1_Params_Future) Struct() (HashFactory_newSha1_Params, error) {
	s, err := p.Future.Struct()
	return HashFactory_newSha1_Params{s}, err
}

type HashFactory_newSha1_Results struct{ capnp.Struct }

// HashFactory_newSha1_Results_TypeID is the unique identifier for the type HashFactory_newSha1_Results.
const HashFactory_newSha1_Results_TypeID = 0xea3e50f7663f7bdf

func NewHashFactory_newSha1_Results(s *capnp.Segment) (HashFactory_newSha1_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HashFactory_newSha1_Results{st}, err
}

func NewRootHashFactory_newSha1_Results(s *capnp.Segment) (HashFactory_newSha1_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HashFactory_newSha1_Results{st}, err
}

func ReadRootHashFactory_newSha1_Results(msg *capnp.Message) (HashFactory_newSha1_Results, error) {
	root, err := msg.Root()
	return HashFactory_newSha1_Results{root.Struct()}, err
}

func (s HashFactory_newSha1_Results) String() string {
	str, _ := text.Marshal(0xea3e50f7663f7bdf, s.Struct)
	return str
}

func (s HashFactory_newSha1_Results) Hash() Hash {
	p, _ := s.Struct.Ptr(0)
	return Hash{Client: p.Interface().Client()}
}

func (s HashFactory_newSha1_Results) HasHash() bool {
	return s.Struct.HasPtr(0)
}

func (s HashFactory_newSha1_Results) SetHash(v Hash) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// HashFactory_newSha1_Results_List is a list of HashFactory_newSha1_Results.
type HashFactory_newSha1_Results_List struct{ capnp.List }

// NewHashFactory_newSha1_Results creates a new list of HashFactory_newSha1_Results.
func NewHashFactory_newSha1_Results_List(s *capnp.Segment, sz int32) (HashFactory_newSha1_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return HashFactory_newSha1_Results_List{l}, err
}

func (s HashFactory_newSha1_Results_List) At(i int) HashFactory_newSha1_Results {
	return HashFactory_newSha1_Results{s.List.Struct(i)}
}

func (s HashFactory_newSha1_Results_List) Set(i int, v HashFactory_newSha1_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s HashFactory_newSha1_Results_List) String() string {
	str, _ := text.MarshalList(0xea3e50f7663f7bdf, s.List)
	return str
}

// HashFactory_newSha1_Results_Future is a wrapper for a HashFactory_newSha1_Results promised by a client call.
type HashFactory_newSha1_Results_Future struct{ *capnp.Future }

func (p HashFactory_newSha1_Results_Future) Struct() (HashFactory_newSha1_Results, error) {
	s, err := p.Future.Struct()
	return HashFactory_newSha1_Results{s}, err
}

func (p HashFactory_newSha1_Results_Future) Hash() Hash {
	return Hash{Client: p.Future.Field(0, nil).Client()}
}

type Hash struct{ Client *capnp.Client }

// Hash_TypeID is the unique identifier for the type Hash.
const Hash_TypeID = 0xf29f97dd675a9431

func (c Hash) Write(ctx context.Context, params func(Hash_write_Params) error) (Hash_write_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf29f97dd675a9431,
			MethodID:      0,
			InterfaceName: "hashes.capnp:Hash",
			MethodName:    "write",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Hash_write_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Hash_write_Results_Future{Future: ans.Future()}, release
}
func (c Hash) Sum(ctx context.Context, params func(Hash_sum_Params) error) (Hash_sum_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf29f97dd675a9431,
			MethodID:      1,
			InterfaceName: "hashes.capnp:Hash",
			MethodName:    "sum",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Hash_sum_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Hash_sum_Results_Future{Future: ans.Future()}, release
}

func (c Hash) AddRef() Hash {
	return Hash{
		Client: c.Client.AddRef(),
	}
}

func (c Hash) Release() {
	c.Client.Release()
}

// A Hash_Server is a Hash with a local implementation.
type Hash_Server interface {
	Write(context.Context, Hash_write) error

	Sum(context.Context, Hash_sum) error
}

// Hash_NewServer creates a new Server from an implementation of Hash_Server.
func Hash_NewServer(s Hash_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Hash_Methods(nil, s), s, c, policy)
}

// Hash_ServerToClient creates a new Client from an implementation of Hash_Server.
// The caller is responsible for calling Release on the returned Client.
func Hash_ServerToClient(s Hash_Server, policy *server.Policy) Hash {
	return Hash{Client: capnp.NewClient(Hash_NewServer(s, policy))}
}

// Hash_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Hash_Methods(methods []server.Method, s Hash_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf29f97dd675a9431,
			MethodID:      0,
			InterfaceName: "hashes.capnp:Hash",
			MethodName:    "write",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Write(ctx, Hash_write{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf29f97dd675a9431,
			MethodID:      1,
			InterfaceName: "hashes.capnp:Hash",
			MethodName:    "sum",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Sum(ctx, Hash_sum{call})
		},
	})

	return methods
}

// Hash_write holds the state for a server call to Hash.write.
// See server.Call for documentation.
type Hash_write struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Hash_write) Args() Hash_write_Params {
	return Hash_write_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Hash_write) AllocResults() (Hash_write_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Hash_write_Results{Struct: r}, err
}

// Hash_sum holds the state for a server call to Hash.sum.
// See server.Call for documentation.
type Hash_sum struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Hash_sum) Args() Hash_sum_Params {
	return Hash_sum_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Hash_sum) AllocResults() (Hash_sum_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Hash_sum_Results{Struct: r}, err
}

type Hash_write_Params struct{ capnp.Struct }

// Hash_write_Params_TypeID is the unique identifier for the type Hash_write_Params.
const Hash_write_Params_TypeID = 0xdffe94ae546cdee3

func NewHash_write_Params(s *capnp.Segment) (Hash_write_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Hash_write_Params{st}, err
}

func NewRootHash_write_Params(s *capnp.Segment) (Hash_write_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Hash_write_Params{st}, err
}

func ReadRootHash_write_Params(msg *capnp.Message) (Hash_write_Params, error) {
	root, err := msg.Root()
	return Hash_write_Params{root.Struct()}, err
}

func (s Hash_write_Params) String() string {
	str, _ := text.Marshal(0xdffe94ae546cdee3, s.Struct)
	return str
}

func (s Hash_write_Params) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Hash_write_Params) HasData() bool {
	return s.Struct.HasPtr(0)
}

func (s Hash_write_Params) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Hash_write_Params_List is a list of Hash_write_Params.
type Hash_write_Params_List struct{ capnp.List }

// NewHash_write_Params creates a new list of Hash_write_Params.
func NewHash_write_Params_List(s *capnp.Segment, sz int32) (Hash_write_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Hash_write_Params_List{l}, err
}

func (s Hash_write_Params_List) At(i int) Hash_write_Params {
	return Hash_write_Params{s.List.Struct(i)}
}

func (s Hash_write_Params_List) Set(i int, v Hash_write_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Hash_write_Params_List) String() string {
	str, _ := text.MarshalList(0xdffe94ae546cdee3, s.List)
	return str
}

// Hash_write_Params_Future is a wrapper for a Hash_write_Params promised by a client call.
type Hash_write_Params_Future struct{ *capnp.Future }

func (p Hash_write_Params_Future) Struct() (Hash_write_Params, error) {
	s, err := p.Future.Struct()
	return Hash_write_Params{s}, err
}

type Hash_write_Results struct{ capnp.Struct }

// Hash_write_Results_TypeID is the unique identifier for the type Hash_write_Results.
const Hash_write_Results_TypeID = 0x80ac741ec7fb8f65

func NewHash_write_Results(s *capnp.Segment) (Hash_write_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Hash_write_Results{st}, err
}

func NewRootHash_write_Results(s *capnp.Segment) (Hash_write_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Hash_write_Results{st}, err
}

func ReadRootHash_write_Results(msg *capnp.Message) (Hash_write_Results, error) {
	root, err := msg.Root()
	return Hash_write_Results{root.Struct()}, err
}

func (s Hash_write_Results) String() string {
	str, _ := text.Marshal(0x80ac741ec7fb8f65, s.Struct)
	return str
}

// Hash_write_Results_List is a list of Hash_write_Results.
type Hash_write_Results_List struct{ capnp.List }

// NewHash_write_Results creates a new list of Hash_write_Results.
func NewHash_write_Results_List(s *capnp.Segment, sz int32) (Hash_write_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Hash_write_Results_List{l}, err
}

func (s Hash_write_Results_List) At(i int) Hash_write_Results {
	return Hash_write_Results{s.List.Struct(i)}
}

func (s Hash_write_Results_List) Set(i int, v Hash_write_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Hash_write_Results_List) String() string {
	str, _ := text.MarshalList(0x80ac741ec7fb8f65, s.List)
	return str
}

// Hash_write_Results_Future is a wrapper for a Hash_write_Results promised by a client call.
type Hash_write_Results_Future struct{ *capnp.Future }

func (p Hash_write_Results_Future) Struct() (Hash_write_Results, error) {
	s, err := p.Future.Struct()
	return Hash_write_Results{s}, err
}

type Hash_sum_Params struct{ capnp.Struct }

// Hash_sum_Params_TypeID is the unique identifier for the type Hash_sum_Params.
const Hash_sum_Params_TypeID = 0xe74bb2d0190cf89c

func NewHash_sum_Params(s *capnp.Segment) (Hash_sum_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Hash_sum_Params{st}, err
}

func NewRootHash_sum_Params(s *capnp.Segment) (Hash_sum_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Hash_sum_Params{st}, err
}

func ReadRootHash_sum_Params(msg *capnp.Message) (Hash_sum_Params, error) {
	root, err := msg.Root()
	return Hash_sum_Params{root.Struct()}, err
}

func (s Hash_sum_Params) String() string {
	str, _ := text.Marshal(0xe74bb2d0190cf89c, s.Struct)
	return str
}

// Hash_sum_Params_List is a list of Hash_sum_Params.
type Hash_sum_Params_List struct{ capnp.List }

// NewHash_sum_Params creates a new list of Hash_sum_Params.
func NewHash_sum_Params_List(s *capnp.Segment, sz int32) (Hash_sum_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Hash_sum_Params_List{l}, err
}

func (s Hash_sum_Params_List) At(i int) Hash_sum_Params { return Hash_sum_Params{s.List.Struct(i)} }

func (s Hash_sum_Params_List) Set(i int, v Hash_sum_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Hash_sum_Params_List) String() string {
	str, _ := text.MarshalList(0xe74bb2d0190cf89c, s.List)
	return str
}

// Hash_sum_Params_Future is a wrapper for a Hash_sum_Params promised by a client call.
type Hash_sum_Params_Future struct{ *capnp.Future }

func (p Hash_sum_Params_Future) Struct() (Hash_sum_Params, error) {
	s, err := p.Future.Struct()
	return Hash_sum_Params{s}, err
}

type Hash_sum_Results struct{ capnp.Struct }

// Hash_sum_Results_TypeID is the unique identifier for the type Hash_sum_Results.
const Hash_sum_Results_TypeID = 0xd093963b95a4e107

func NewHash_sum_Results(s *capnp.Segment) (Hash_sum_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Hash_sum_Results{st}, err
}

func NewRootHash_sum_Results(s *capnp.Segment) (Hash_sum_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Hash_sum_Results{st}, err
}

func ReadRootHash_sum_Results(msg *capnp.Message) (Hash_sum_Results, error) {
	root, err := msg.Root()
	return Hash_sum_Results{root.Struct()}, err
}

func (s Hash_sum_Results) String() string {
	str, _ := text.Marshal(0xd093963b95a4e107, s.Struct)
	return str
}

func (s Hash_sum_Results) Hash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Hash_sum_Results) HasHash() bool {
	return s.Struct.HasPtr(0)
}

func (s Hash_sum_Results) SetHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Hash_sum_Results_List is a list of Hash_sum_Results.
type Hash_sum_Results_List struct{ capnp.List }

// NewHash_sum_Results creates a new list of Hash_sum_Results.
func NewHash_sum_Results_List(s *capnp.Segment, sz int32) (Hash_sum_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Hash_sum_Results_List{l}, err
}

func (s Hash_sum_Results_List) At(i int) Hash_sum_Results { return Hash_sum_Results{s.List.Struct(i)} }

func (s Hash_sum_Results_List) Set(i int, v Hash_sum_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Hash_sum_Results_List) String() string {
	str, _ := text.MarshalList(0xd093963b95a4e107, s.List)
	return str
}

// Hash_sum_Results_Future is a wrapper for a Hash_sum_Results promised by a client call.
type Hash_sum_Results_Future struct{ *capnp.Future }

func (p Hash_sum_Results_Future) Struct() (Hash_sum_Results, error) {
	s, err := p.Future.Struct()
	return Hash_sum_Results{s}, err
}

const schema_db8274f9144abc7e = "x\xda|\x92?h\x14A\x18\xc5\xdf\x9b\x9bu\xe3\x9f" +
	"\xe5\x18'\x16\xd7\x18\x91\x0b\x82\xc8\xe1\x19,T\xf4\x8e" +
	"\x14*\xb1\xd9\x8d\x16b7\xc4\xd5\x15r1\xdc\xee\x11" +
	"DP\xb1\x11A\x10b4\x8d\xa0\x85v\x9a\"uZ" +
	"\x11\x02B\xd2*g\x08\x16B\xca\x80h\x14]\xd9=" +
	"\xf76`.\xdd\xc2\x9b\xef}\xbf\xef\xed;\xc0\xba\xac" +
	":\x87$\x84w\xd4\xda\x11\xfb\x8f\x7f\xbd\xdf\x1f\xbd\xb9" +
	"\x07\xb5\x97\x80\xb4\x81\xa1\x0d\x0aB\xc6\x8b/\x1f\xbd^" +
	"\xde5?\x0dU\xca\x946\x87\x13e\xe1\xe3\xef\xd9\xe2" +
	"\xe5\xb7sPN!\xbe\xb30\xd2\xbf\x11\xdd\xff\x04P" +
	"\xbf\xe3\xa2^\xa6\x0d\xe8\x0f<\xa7\xbf%_\xb1\xbd\xfa" +
	"\xea\xe9\xa9gO\x96:\x0b\xacTms\x1d\xd4\xab\xac" +
	"\x81\xf1\x97\xcf\xe3\x97\xe6f\xfe\xacl\xd6)~\x82\xda" +
	"\x12\x89\xfe\xfc\xc7\x9e\xd2\xd2\xfc\x85\xaf9\xa0\x1e\x14k" +
	"\x90\xf1\xca\xed\xda\xb5\xef\xee\x99\xb5\x0e_:8\xb4S" +
	"\x8c\x10\xd4\xfb\xd2\xc9\xea\xcc\x95\xeb\xed\xd9\x17\xeb\xffa" +
	"\x1e\x17\xd3\xfa\xb4H\x9cN\x88\x07\xfa\xa1\xb0q$\x0e" +
	"L\x18\xf8ael\xb7\x99\x9c\x98<y\xde\x84Ae" +
	"\xaay#\xf2\xcb\xa3~\xd8\x1a\x8fBd\x0f\xba\xfaY" +
	"3\x16\xddl\xde\xaaL\xf8S\x17\x03S-\xbb\xa6i" +
	"\x1a\xbd\xdf\x01.\xe9\xc9\x82\x05t\xa3ev\x83R\xc3" +
	"\x10\xca\xb2\xef\xfe3\xab\xd3%\xbbL\"g\x0a[\x8d" +
	"\xf2\xa8?\x90\"y\xb2 \x01I@9\x87\x01\xaf\xaf" +
	"@\xaf_\xb0\x98\x8c\xd1\x81\xa0\x83-=:w\xd5:" +
	"\xbc\xbdL\xae\x9a\xc8lg\x92\x80\xb8\xa6\x98Xte" +
	"\xd93\x9b,Dl\xcb\xac\xf2_\x06RmZ\xcc\xcc" +
	"\x99A\x92b_\x9ab\xd6\x1cf\x1dV\xd5c\x10j" +
	"\xd0f\xde\x1af\xf5S\xa5\x83\x10\xca\xb1\x07\xd2\xeb\xeb" +
	"\xb4\xc3V#M\xf9o\x00\x00\x00\xff\xff/\x8a\xe63"

func init() {
	schemas.Register(schema_db8274f9144abc7e,
		0x80ac741ec7fb8f65,
		0x92b20ad1a58ca0ca,
		0xaead580f97fddabc,
		0xd093963b95a4e107,
		0xdffe94ae546cdee3,
		0xe74bb2d0190cf89c,
		0xea3e50f7663f7bdf,
		0xf29f97dd675a9431)
}
