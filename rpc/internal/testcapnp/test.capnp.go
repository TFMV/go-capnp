// Code generated by capnpc-go. DO NOT EDIT.

package testcapnp

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	stream "capnproto.org/go/capnp/v3/std/capnp/stream"
	context "context"
)

type PingPong capnp.Client

// PingPong_TypeID is the unique identifier for the type PingPong.
const PingPong_TypeID = 0xf004c474c2f8ee7a

func (c PingPong) EchoNum(ctx context.Context, params func(PingPong_echoNum_Params) error) (PingPong_echoNum_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf004c474c2f8ee7a,
			MethodID:      0,
			InterfaceName: "test.capnp:PingPong",
			MethodName:    "echoNum",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(PingPong_echoNum_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return PingPong_echoNum_Results_Future{Future: ans.Future()}, release

}

func (c PingPong) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c PingPong) String() string {
	return "PingPong(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c PingPong) AddRef() PingPong {
	return PingPong(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c PingPong) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c PingPong) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c PingPong) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (PingPong) DecodeFromPtr(p capnp.Ptr) PingPong {
	return PingPong(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c PingPong) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c PingPong) IsSame(other PingPong) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c PingPong) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c PingPong) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A PingPong_Server is a PingPong with a local implementation.
type PingPong_Server interface {
	EchoNum(context.Context, PingPong_echoNum) error
}

// PingPong_NewServer creates a new Server from an implementation of PingPong_Server.
func PingPong_NewServer(s PingPong_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(PingPong_Methods(nil, s), s, c)
}

// PingPong_ServerToClient creates a new Client from an implementation of PingPong_Server.
// The caller is responsible for calling Release on the returned Client.
func PingPong_ServerToClient(s PingPong_Server) PingPong {
	return PingPong(capnp.NewClient(PingPong_NewServer(s)))
}

// PingPong_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func PingPong_Methods(methods []server.Method, s PingPong_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf004c474c2f8ee7a,
			MethodID:      0,
			InterfaceName: "test.capnp:PingPong",
			MethodName:    "echoNum",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.EchoNum(ctx, PingPong_echoNum{call})
		},
	})

	return methods
}

// PingPong_echoNum holds the state for a server call to PingPong.echoNum.
// See server.Call for documentation.
type PingPong_echoNum struct {
	*server.Call
}

// Args returns the call's arguments.
func (c PingPong_echoNum) Args() PingPong_echoNum_Params {
	return PingPong_echoNum_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c PingPong_echoNum) AllocResults() (PingPong_echoNum_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return PingPong_echoNum_Results(r), err
}

// PingPong_List is a list of PingPong.
type PingPong_List = capnp.CapList[PingPong]

// NewPingPong creates a new list of PingPong.
func NewPingPong_List(s *capnp.Segment, sz int32) (PingPong_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[PingPong](l), err
}

type PingPong_echoNum_Params capnp.Struct

// PingPong_echoNum_Params_TypeID is the unique identifier for the type PingPong_echoNum_Params.
const PingPong_echoNum_Params_TypeID = 0xd797e0a99edf0921

func NewPingPong_echoNum_Params(s *capnp.Segment) (PingPong_echoNum_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return PingPong_echoNum_Params(st), err
}

func NewRootPingPong_echoNum_Params(s *capnp.Segment) (PingPong_echoNum_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return PingPong_echoNum_Params(st), err
}

func ReadRootPingPong_echoNum_Params(msg *capnp.Message) (PingPong_echoNum_Params, error) {
	root, err := msg.Root()
	return PingPong_echoNum_Params(root.Struct()), err
}

func (s PingPong_echoNum_Params) String() string {
	str, _ := text.Marshal(0xd797e0a99edf0921, capnp.Struct(s))
	return str
}

func (s PingPong_echoNum_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PingPong_echoNum_Params) DecodeFromPtr(p capnp.Ptr) PingPong_echoNum_Params {
	return PingPong_echoNum_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PingPong_echoNum_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PingPong_echoNum_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PingPong_echoNum_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PingPong_echoNum_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PingPong_echoNum_Params) N() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s PingPong_echoNum_Params) SetN(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

// PingPong_echoNum_Params_List is a list of PingPong_echoNum_Params.
type PingPong_echoNum_Params_List = capnp.StructList[PingPong_echoNum_Params]

// NewPingPong_echoNum_Params creates a new list of PingPong_echoNum_Params.
func NewPingPong_echoNum_Params_List(s *capnp.Segment, sz int32) (PingPong_echoNum_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[PingPong_echoNum_Params](l), err
}

// PingPong_echoNum_Params_Future is a wrapper for a PingPong_echoNum_Params promised by a client call.
type PingPong_echoNum_Params_Future struct{ *capnp.Future }

func (f PingPong_echoNum_Params_Future) Struct() (PingPong_echoNum_Params, error) {
	p, err := f.Future.Ptr()
	return PingPong_echoNum_Params(p.Struct()), err
}

type PingPong_echoNum_Results capnp.Struct

// PingPong_echoNum_Results_TypeID is the unique identifier for the type PingPong_echoNum_Results.
const PingPong_echoNum_Results_TypeID = 0x85ddfd96db252600

func NewPingPong_echoNum_Results(s *capnp.Segment) (PingPong_echoNum_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return PingPong_echoNum_Results(st), err
}

func NewRootPingPong_echoNum_Results(s *capnp.Segment) (PingPong_echoNum_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return PingPong_echoNum_Results(st), err
}

func ReadRootPingPong_echoNum_Results(msg *capnp.Message) (PingPong_echoNum_Results, error) {
	root, err := msg.Root()
	return PingPong_echoNum_Results(root.Struct()), err
}

func (s PingPong_echoNum_Results) String() string {
	str, _ := text.Marshal(0x85ddfd96db252600, capnp.Struct(s))
	return str
}

func (s PingPong_echoNum_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PingPong_echoNum_Results) DecodeFromPtr(p capnp.Ptr) PingPong_echoNum_Results {
	return PingPong_echoNum_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PingPong_echoNum_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PingPong_echoNum_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PingPong_echoNum_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PingPong_echoNum_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PingPong_echoNum_Results) N() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s PingPong_echoNum_Results) SetN(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

// PingPong_echoNum_Results_List is a list of PingPong_echoNum_Results.
type PingPong_echoNum_Results_List = capnp.StructList[PingPong_echoNum_Results]

// NewPingPong_echoNum_Results creates a new list of PingPong_echoNum_Results.
func NewPingPong_echoNum_Results_List(s *capnp.Segment, sz int32) (PingPong_echoNum_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[PingPong_echoNum_Results](l), err
}

// PingPong_echoNum_Results_Future is a wrapper for a PingPong_echoNum_Results promised by a client call.
type PingPong_echoNum_Results_Future struct{ *capnp.Future }

func (f PingPong_echoNum_Results_Future) Struct() (PingPong_echoNum_Results, error) {
	p, err := f.Future.Ptr()
	return PingPong_echoNum_Results(p.Struct()), err
}

type StreamTest capnp.Client

// StreamTest_TypeID is the unique identifier for the type StreamTest.
const StreamTest_TypeID = 0xbb3ca85b01eea465

func (c StreamTest) Push(ctx context.Context, params func(StreamTest_push_Params) error) error {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbb3ca85b01eea465,
			MethodID:      0,
			InterfaceName: "test.capnp:StreamTest",
			MethodName:    "push",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(StreamTest_push_Params(s)) }
	}

	return capnp.Client(c).SendStreamCall(ctx, s)

}

func (c StreamTest) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c StreamTest) String() string {
	return "StreamTest(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c StreamTest) AddRef() StreamTest {
	return StreamTest(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c StreamTest) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c StreamTest) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c StreamTest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (StreamTest) DecodeFromPtr(p capnp.Ptr) StreamTest {
	return StreamTest(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c StreamTest) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c StreamTest) IsSame(other StreamTest) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c StreamTest) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c StreamTest) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A StreamTest_Server is a StreamTest with a local implementation.
type StreamTest_Server interface {
	Push(context.Context, StreamTest_push) error
}

// StreamTest_NewServer creates a new Server from an implementation of StreamTest_Server.
func StreamTest_NewServer(s StreamTest_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(StreamTest_Methods(nil, s), s, c)
}

// StreamTest_ServerToClient creates a new Client from an implementation of StreamTest_Server.
// The caller is responsible for calling Release on the returned Client.
func StreamTest_ServerToClient(s StreamTest_Server) StreamTest {
	return StreamTest(capnp.NewClient(StreamTest_NewServer(s)))
}

// StreamTest_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func StreamTest_Methods(methods []server.Method, s StreamTest_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbb3ca85b01eea465,
			MethodID:      0,
			InterfaceName: "test.capnp:StreamTest",
			MethodName:    "push",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Push(ctx, StreamTest_push{call})
		},
	})

	return methods
}

// StreamTest_push holds the state for a server call to StreamTest.push.
// See server.Call for documentation.
type StreamTest_push struct {
	*server.Call
}

// Args returns the call's arguments.
func (c StreamTest_push) Args() StreamTest_push_Params {
	return StreamTest_push_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c StreamTest_push) AllocResults() (stream.StreamResult, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return stream.StreamResult(r), err
}

// StreamTest_List is a list of StreamTest.
type StreamTest_List = capnp.CapList[StreamTest]

// NewStreamTest creates a new list of StreamTest.
func NewStreamTest_List(s *capnp.Segment, sz int32) (StreamTest_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[StreamTest](l), err
}

type StreamTest_push_Params capnp.Struct

// StreamTest_push_Params_TypeID is the unique identifier for the type StreamTest_push_Params.
const StreamTest_push_Params_TypeID = 0xf838dca6c8721bdb

func NewStreamTest_push_Params(s *capnp.Segment) (StreamTest_push_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StreamTest_push_Params(st), err
}

func NewRootStreamTest_push_Params(s *capnp.Segment) (StreamTest_push_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StreamTest_push_Params(st), err
}

func ReadRootStreamTest_push_Params(msg *capnp.Message) (StreamTest_push_Params, error) {
	root, err := msg.Root()
	return StreamTest_push_Params(root.Struct()), err
}

func (s StreamTest_push_Params) String() string {
	str, _ := text.Marshal(0xf838dca6c8721bdb, capnp.Struct(s))
	return str
}

func (s StreamTest_push_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StreamTest_push_Params) DecodeFromPtr(p capnp.Ptr) StreamTest_push_Params {
	return StreamTest_push_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StreamTest_push_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StreamTest_push_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StreamTest_push_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StreamTest_push_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s StreamTest_push_Params) Data() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s StreamTest_push_Params) HasData() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s StreamTest_push_Params) SetData(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// StreamTest_push_Params_List is a list of StreamTest_push_Params.
type StreamTest_push_Params_List = capnp.StructList[StreamTest_push_Params]

// NewStreamTest_push_Params creates a new list of StreamTest_push_Params.
func NewStreamTest_push_Params_List(s *capnp.Segment, sz int32) (StreamTest_push_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[StreamTest_push_Params](l), err
}

// StreamTest_push_Params_Future is a wrapper for a StreamTest_push_Params promised by a client call.
type StreamTest_push_Params_Future struct{ *capnp.Future }

func (f StreamTest_push_Params_Future) Struct() (StreamTest_push_Params, error) {
	p, err := f.Future.Ptr()
	return StreamTest_push_Params(p.Struct()), err
}

type CapArgsTest capnp.Client

// CapArgsTest_TypeID is the unique identifier for the type CapArgsTest.
const CapArgsTest_TypeID = 0xb86bce7f916a10cc

func (c CapArgsTest) Call(ctx context.Context, params func(CapArgsTest_call_Params) error) (CapArgsTest_call_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb86bce7f916a10cc,
			MethodID:      0,
			InterfaceName: "test.capnp:CapArgsTest",
			MethodName:    "call",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapArgsTest_call_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapArgsTest_call_Results_Future{Future: ans.Future()}, release

}

func (c CapArgsTest) Self(ctx context.Context, params func(CapArgsTest_self_Params) error) (CapArgsTest_self_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb86bce7f916a10cc,
			MethodID:      1,
			InterfaceName: "test.capnp:CapArgsTest",
			MethodName:    "self",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapArgsTest_self_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapArgsTest_self_Results_Future{Future: ans.Future()}, release

}

func (c CapArgsTest) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c CapArgsTest) String() string {
	return "CapArgsTest(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c CapArgsTest) AddRef() CapArgsTest {
	return CapArgsTest(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c CapArgsTest) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c CapArgsTest) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c CapArgsTest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (CapArgsTest) DecodeFromPtr(p capnp.Ptr) CapArgsTest {
	return CapArgsTest(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c CapArgsTest) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c CapArgsTest) IsSame(other CapArgsTest) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c CapArgsTest) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c CapArgsTest) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A CapArgsTest_Server is a CapArgsTest with a local implementation.
type CapArgsTest_Server interface {
	Call(context.Context, CapArgsTest_call) error

	Self(context.Context, CapArgsTest_self) error
}

// CapArgsTest_NewServer creates a new Server from an implementation of CapArgsTest_Server.
func CapArgsTest_NewServer(s CapArgsTest_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapArgsTest_Methods(nil, s), s, c)
}

// CapArgsTest_ServerToClient creates a new Client from an implementation of CapArgsTest_Server.
// The caller is responsible for calling Release on the returned Client.
func CapArgsTest_ServerToClient(s CapArgsTest_Server) CapArgsTest {
	return CapArgsTest(capnp.NewClient(CapArgsTest_NewServer(s)))
}

// CapArgsTest_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapArgsTest_Methods(methods []server.Method, s CapArgsTest_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb86bce7f916a10cc,
			MethodID:      0,
			InterfaceName: "test.capnp:CapArgsTest",
			MethodName:    "call",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Call(ctx, CapArgsTest_call{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb86bce7f916a10cc,
			MethodID:      1,
			InterfaceName: "test.capnp:CapArgsTest",
			MethodName:    "self",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Self(ctx, CapArgsTest_self{call})
		},
	})

	return methods
}

// CapArgsTest_call holds the state for a server call to CapArgsTest.call.
// See server.Call for documentation.
type CapArgsTest_call struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapArgsTest_call) Args() CapArgsTest_call_Params {
	return CapArgsTest_call_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapArgsTest_call) AllocResults() (CapArgsTest_call_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapArgsTest_call_Results(r), err
}

// CapArgsTest_self holds the state for a server call to CapArgsTest.self.
// See server.Call for documentation.
type CapArgsTest_self struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapArgsTest_self) Args() CapArgsTest_self_Params {
	return CapArgsTest_self_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapArgsTest_self) AllocResults() (CapArgsTest_self_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapArgsTest_self_Results(r), err
}

// CapArgsTest_List is a list of CapArgsTest.
type CapArgsTest_List = capnp.CapList[CapArgsTest]

// NewCapArgsTest creates a new list of CapArgsTest.
func NewCapArgsTest_List(s *capnp.Segment, sz int32) (CapArgsTest_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[CapArgsTest](l), err
}

type CapArgsTest_call_Params capnp.Struct

// CapArgsTest_call_Params_TypeID is the unique identifier for the type CapArgsTest_call_Params.
const CapArgsTest_call_Params_TypeID = 0x80087e4e698768a2

func NewCapArgsTest_call_Params(s *capnp.Segment) (CapArgsTest_call_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapArgsTest_call_Params(st), err
}

func NewRootCapArgsTest_call_Params(s *capnp.Segment) (CapArgsTest_call_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapArgsTest_call_Params(st), err
}

func ReadRootCapArgsTest_call_Params(msg *capnp.Message) (CapArgsTest_call_Params, error) {
	root, err := msg.Root()
	return CapArgsTest_call_Params(root.Struct()), err
}

func (s CapArgsTest_call_Params) String() string {
	str, _ := text.Marshal(0x80087e4e698768a2, capnp.Struct(s))
	return str
}

func (s CapArgsTest_call_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapArgsTest_call_Params) DecodeFromPtr(p capnp.Ptr) CapArgsTest_call_Params {
	return CapArgsTest_call_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapArgsTest_call_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapArgsTest_call_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapArgsTest_call_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapArgsTest_call_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapArgsTest_call_Params) Cap() capnp.Client {
	p, _ := capnp.Struct(s).Ptr(0)
	return p.Interface().Client()
}

func (s CapArgsTest_call_Params) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapArgsTest_call_Params) SetCap(c capnp.Client) error {
	if !c.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(c))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// CapArgsTest_call_Params_List is a list of CapArgsTest_call_Params.
type CapArgsTest_call_Params_List = capnp.StructList[CapArgsTest_call_Params]

// NewCapArgsTest_call_Params creates a new list of CapArgsTest_call_Params.
func NewCapArgsTest_call_Params_List(s *capnp.Segment, sz int32) (CapArgsTest_call_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapArgsTest_call_Params](l), err
}

// CapArgsTest_call_Params_Future is a wrapper for a CapArgsTest_call_Params promised by a client call.
type CapArgsTest_call_Params_Future struct{ *capnp.Future }

func (f CapArgsTest_call_Params_Future) Struct() (CapArgsTest_call_Params, error) {
	p, err := f.Future.Ptr()
	return CapArgsTest_call_Params(p.Struct()), err
}
func (p CapArgsTest_call_Params_Future) Cap() capnp.Client {
	return p.Future.Field(0, nil).Client()
}

type CapArgsTest_call_Results capnp.Struct

// CapArgsTest_call_Results_TypeID is the unique identifier for the type CapArgsTest_call_Results.
const CapArgsTest_call_Results_TypeID = 0x96fbc50dc2f0200d

func NewCapArgsTest_call_Results(s *capnp.Segment) (CapArgsTest_call_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapArgsTest_call_Results(st), err
}

func NewRootCapArgsTest_call_Results(s *capnp.Segment) (CapArgsTest_call_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapArgsTest_call_Results(st), err
}

func ReadRootCapArgsTest_call_Results(msg *capnp.Message) (CapArgsTest_call_Results, error) {
	root, err := msg.Root()
	return CapArgsTest_call_Results(root.Struct()), err
}

func (s CapArgsTest_call_Results) String() string {
	str, _ := text.Marshal(0x96fbc50dc2f0200d, capnp.Struct(s))
	return str
}

func (s CapArgsTest_call_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapArgsTest_call_Results) DecodeFromPtr(p capnp.Ptr) CapArgsTest_call_Results {
	return CapArgsTest_call_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapArgsTest_call_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapArgsTest_call_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapArgsTest_call_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapArgsTest_call_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapArgsTest_call_Results_List is a list of CapArgsTest_call_Results.
type CapArgsTest_call_Results_List = capnp.StructList[CapArgsTest_call_Results]

// NewCapArgsTest_call_Results creates a new list of CapArgsTest_call_Results.
func NewCapArgsTest_call_Results_List(s *capnp.Segment, sz int32) (CapArgsTest_call_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapArgsTest_call_Results](l), err
}

// CapArgsTest_call_Results_Future is a wrapper for a CapArgsTest_call_Results promised by a client call.
type CapArgsTest_call_Results_Future struct{ *capnp.Future }

func (f CapArgsTest_call_Results_Future) Struct() (CapArgsTest_call_Results, error) {
	p, err := f.Future.Ptr()
	return CapArgsTest_call_Results(p.Struct()), err
}

type CapArgsTest_self_Params capnp.Struct

// CapArgsTest_self_Params_TypeID is the unique identifier for the type CapArgsTest_self_Params.
const CapArgsTest_self_Params_TypeID = 0xe2553e5a663abb7d

func NewCapArgsTest_self_Params(s *capnp.Segment) (CapArgsTest_self_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapArgsTest_self_Params(st), err
}

func NewRootCapArgsTest_self_Params(s *capnp.Segment) (CapArgsTest_self_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapArgsTest_self_Params(st), err
}

func ReadRootCapArgsTest_self_Params(msg *capnp.Message) (CapArgsTest_self_Params, error) {
	root, err := msg.Root()
	return CapArgsTest_self_Params(root.Struct()), err
}

func (s CapArgsTest_self_Params) String() string {
	str, _ := text.Marshal(0xe2553e5a663abb7d, capnp.Struct(s))
	return str
}

func (s CapArgsTest_self_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapArgsTest_self_Params) DecodeFromPtr(p capnp.Ptr) CapArgsTest_self_Params {
	return CapArgsTest_self_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapArgsTest_self_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapArgsTest_self_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapArgsTest_self_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapArgsTest_self_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapArgsTest_self_Params_List is a list of CapArgsTest_self_Params.
type CapArgsTest_self_Params_List = capnp.StructList[CapArgsTest_self_Params]

// NewCapArgsTest_self_Params creates a new list of CapArgsTest_self_Params.
func NewCapArgsTest_self_Params_List(s *capnp.Segment, sz int32) (CapArgsTest_self_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapArgsTest_self_Params](l), err
}

// CapArgsTest_self_Params_Future is a wrapper for a CapArgsTest_self_Params promised by a client call.
type CapArgsTest_self_Params_Future struct{ *capnp.Future }

func (f CapArgsTest_self_Params_Future) Struct() (CapArgsTest_self_Params, error) {
	p, err := f.Future.Ptr()
	return CapArgsTest_self_Params(p.Struct()), err
}

type CapArgsTest_self_Results capnp.Struct

// CapArgsTest_self_Results_TypeID is the unique identifier for the type CapArgsTest_self_Results.
const CapArgsTest_self_Results_TypeID = 0x9746cc05cbff1132

func NewCapArgsTest_self_Results(s *capnp.Segment) (CapArgsTest_self_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapArgsTest_self_Results(st), err
}

func NewRootCapArgsTest_self_Results(s *capnp.Segment) (CapArgsTest_self_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapArgsTest_self_Results(st), err
}

func ReadRootCapArgsTest_self_Results(msg *capnp.Message) (CapArgsTest_self_Results, error) {
	root, err := msg.Root()
	return CapArgsTest_self_Results(root.Struct()), err
}

func (s CapArgsTest_self_Results) String() string {
	str, _ := text.Marshal(0x9746cc05cbff1132, capnp.Struct(s))
	return str
}

func (s CapArgsTest_self_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapArgsTest_self_Results) DecodeFromPtr(p capnp.Ptr) CapArgsTest_self_Results {
	return CapArgsTest_self_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapArgsTest_self_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapArgsTest_self_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapArgsTest_self_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapArgsTest_self_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapArgsTest_self_Results) Self() CapArgsTest {
	p, _ := capnp.Struct(s).Ptr(0)
	return CapArgsTest(p.Interface().Client())
}

func (s CapArgsTest_self_Results) HasSelf() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapArgsTest_self_Results) SetSelf(v CapArgsTest) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// CapArgsTest_self_Results_List is a list of CapArgsTest_self_Results.
type CapArgsTest_self_Results_List = capnp.StructList[CapArgsTest_self_Results]

// NewCapArgsTest_self_Results creates a new list of CapArgsTest_self_Results.
func NewCapArgsTest_self_Results_List(s *capnp.Segment, sz int32) (CapArgsTest_self_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapArgsTest_self_Results](l), err
}

// CapArgsTest_self_Results_Future is a wrapper for a CapArgsTest_self_Results promised by a client call.
type CapArgsTest_self_Results_Future struct{ *capnp.Future }

func (f CapArgsTest_self_Results_Future) Struct() (CapArgsTest_self_Results, error) {
	p, err := f.Future.Ptr()
	return CapArgsTest_self_Results(p.Struct()), err
}
func (p CapArgsTest_self_Results_Future) Self() CapArgsTest {
	return CapArgsTest(p.Future.Field(0, nil).Client())
}

type PingPongProvider capnp.Client

// PingPongProvider_TypeID is the unique identifier for the type PingPongProvider.
const PingPongProvider_TypeID = 0x95b6142577e93239

func (c PingPongProvider) PingPong(ctx context.Context, params func(PingPongProvider_pingPong_Params) error) (PingPongProvider_pingPong_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x95b6142577e93239,
			MethodID:      0,
			InterfaceName: "test.capnp:PingPongProvider",
			MethodName:    "pingPong",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(PingPongProvider_pingPong_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return PingPongProvider_pingPong_Results_Future{Future: ans.Future()}, release

}

func (c PingPongProvider) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c PingPongProvider) String() string {
	return "PingPongProvider(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c PingPongProvider) AddRef() PingPongProvider {
	return PingPongProvider(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c PingPongProvider) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c PingPongProvider) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c PingPongProvider) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (PingPongProvider) DecodeFromPtr(p capnp.Ptr) PingPongProvider {
	return PingPongProvider(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c PingPongProvider) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c PingPongProvider) IsSame(other PingPongProvider) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c PingPongProvider) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c PingPongProvider) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A PingPongProvider_Server is a PingPongProvider with a local implementation.
type PingPongProvider_Server interface {
	PingPong(context.Context, PingPongProvider_pingPong) error
}

// PingPongProvider_NewServer creates a new Server from an implementation of PingPongProvider_Server.
func PingPongProvider_NewServer(s PingPongProvider_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(PingPongProvider_Methods(nil, s), s, c)
}

// PingPongProvider_ServerToClient creates a new Client from an implementation of PingPongProvider_Server.
// The caller is responsible for calling Release on the returned Client.
func PingPongProvider_ServerToClient(s PingPongProvider_Server) PingPongProvider {
	return PingPongProvider(capnp.NewClient(PingPongProvider_NewServer(s)))
}

// PingPongProvider_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func PingPongProvider_Methods(methods []server.Method, s PingPongProvider_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x95b6142577e93239,
			MethodID:      0,
			InterfaceName: "test.capnp:PingPongProvider",
			MethodName:    "pingPong",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.PingPong(ctx, PingPongProvider_pingPong{call})
		},
	})

	return methods
}

// PingPongProvider_pingPong holds the state for a server call to PingPongProvider.pingPong.
// See server.Call for documentation.
type PingPongProvider_pingPong struct {
	*server.Call
}

// Args returns the call's arguments.
func (c PingPongProvider_pingPong) Args() PingPongProvider_pingPong_Params {
	return PingPongProvider_pingPong_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c PingPongProvider_pingPong) AllocResults() (PingPongProvider_pingPong_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PingPongProvider_pingPong_Results(r), err
}

// PingPongProvider_List is a list of PingPongProvider.
type PingPongProvider_List = capnp.CapList[PingPongProvider]

// NewPingPongProvider creates a new list of PingPongProvider.
func NewPingPongProvider_List(s *capnp.Segment, sz int32) (PingPongProvider_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[PingPongProvider](l), err
}

type PingPongProvider_pingPong_Params capnp.Struct

// PingPongProvider_pingPong_Params_TypeID is the unique identifier for the type PingPongProvider_pingPong_Params.
const PingPongProvider_pingPong_Params_TypeID = 0xd4e835c17f1ef32c

func NewPingPongProvider_pingPong_Params(s *capnp.Segment) (PingPongProvider_pingPong_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return PingPongProvider_pingPong_Params(st), err
}

func NewRootPingPongProvider_pingPong_Params(s *capnp.Segment) (PingPongProvider_pingPong_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return PingPongProvider_pingPong_Params(st), err
}

func ReadRootPingPongProvider_pingPong_Params(msg *capnp.Message) (PingPongProvider_pingPong_Params, error) {
	root, err := msg.Root()
	return PingPongProvider_pingPong_Params(root.Struct()), err
}

func (s PingPongProvider_pingPong_Params) String() string {
	str, _ := text.Marshal(0xd4e835c17f1ef32c, capnp.Struct(s))
	return str
}

func (s PingPongProvider_pingPong_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PingPongProvider_pingPong_Params) DecodeFromPtr(p capnp.Ptr) PingPongProvider_pingPong_Params {
	return PingPongProvider_pingPong_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PingPongProvider_pingPong_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PingPongProvider_pingPong_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PingPongProvider_pingPong_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PingPongProvider_pingPong_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// PingPongProvider_pingPong_Params_List is a list of PingPongProvider_pingPong_Params.
type PingPongProvider_pingPong_Params_List = capnp.StructList[PingPongProvider_pingPong_Params]

// NewPingPongProvider_pingPong_Params creates a new list of PingPongProvider_pingPong_Params.
func NewPingPongProvider_pingPong_Params_List(s *capnp.Segment, sz int32) (PingPongProvider_pingPong_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[PingPongProvider_pingPong_Params](l), err
}

// PingPongProvider_pingPong_Params_Future is a wrapper for a PingPongProvider_pingPong_Params promised by a client call.
type PingPongProvider_pingPong_Params_Future struct{ *capnp.Future }

func (f PingPongProvider_pingPong_Params_Future) Struct() (PingPongProvider_pingPong_Params, error) {
	p, err := f.Future.Ptr()
	return PingPongProvider_pingPong_Params(p.Struct()), err
}

type PingPongProvider_pingPong_Results capnp.Struct

// PingPongProvider_pingPong_Results_TypeID is the unique identifier for the type PingPongProvider_pingPong_Results.
const PingPongProvider_pingPong_Results_TypeID = 0xf269473b6db8d0eb

func NewPingPongProvider_pingPong_Results(s *capnp.Segment) (PingPongProvider_pingPong_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PingPongProvider_pingPong_Results(st), err
}

func NewRootPingPongProvider_pingPong_Results(s *capnp.Segment) (PingPongProvider_pingPong_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PingPongProvider_pingPong_Results(st), err
}

func ReadRootPingPongProvider_pingPong_Results(msg *capnp.Message) (PingPongProvider_pingPong_Results, error) {
	root, err := msg.Root()
	return PingPongProvider_pingPong_Results(root.Struct()), err
}

func (s PingPongProvider_pingPong_Results) String() string {
	str, _ := text.Marshal(0xf269473b6db8d0eb, capnp.Struct(s))
	return str
}

func (s PingPongProvider_pingPong_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PingPongProvider_pingPong_Results) DecodeFromPtr(p capnp.Ptr) PingPongProvider_pingPong_Results {
	return PingPongProvider_pingPong_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PingPongProvider_pingPong_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PingPongProvider_pingPong_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PingPongProvider_pingPong_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PingPongProvider_pingPong_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PingPongProvider_pingPong_Results) PingPong() PingPong {
	p, _ := capnp.Struct(s).Ptr(0)
	return PingPong(p.Interface().Client())
}

func (s PingPongProvider_pingPong_Results) HasPingPong() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PingPongProvider_pingPong_Results) SetPingPong(v PingPong) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// PingPongProvider_pingPong_Results_List is a list of PingPongProvider_pingPong_Results.
type PingPongProvider_pingPong_Results_List = capnp.StructList[PingPongProvider_pingPong_Results]

// NewPingPongProvider_pingPong_Results creates a new list of PingPongProvider_pingPong_Results.
func NewPingPongProvider_pingPong_Results_List(s *capnp.Segment, sz int32) (PingPongProvider_pingPong_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[PingPongProvider_pingPong_Results](l), err
}

// PingPongProvider_pingPong_Results_Future is a wrapper for a PingPongProvider_pingPong_Results promised by a client call.
type PingPongProvider_pingPong_Results_Future struct{ *capnp.Future }

func (f PingPongProvider_pingPong_Results_Future) Struct() (PingPongProvider_pingPong_Results, error) {
	p, err := f.Future.Ptr()
	return PingPongProvider_pingPong_Results(p.Struct()), err
}
func (p PingPongProvider_pingPong_Results_Future) PingPong() PingPong {
	return PingPong(p.Future.Field(0, nil).Client())
}

const schema_ef12a34b9807e19c = "x\xda\x94TMH\x14o\x18\x7f\x9ey\xdf\xf9\x8f\xf2" +
	"o\xd9\xde\x1d\xe9\x9b>D;H,\xa9\x04e\xd9j" +
	"a\x0bF\xb2cz\xa8\x0e1\xe9\xa8k;\xeb2\xb3" +
	"\x9b\x14\x94]\xc4S\x07\x0fiFt\xb0\x88:t(" +
	"($/%\x05E\x12\x1d\x8a\x08\x93\xd2S\x11\x98\xd5" +
	"E\x88\x9ax\xdf\xd9qg\xfd\x82\xae\xfb<\xf3\xfbz" +
	"~\xef\xee|\x815\xb4<\x10Q@\xd2\x9a\xe4\xff\x9c" +
	"\xe1\x8e\xbex\xc3\x85\x82\x8b\xc0\xd6\"\x80\x8c\x0a@e" +
	"/\xd9\x80\x80\xea%\x12\x01\xfc\xb3\xbdtb\xe0\xf7d" +
	"\xafV\x84\x08@\xf9\xf8.)\xe6\xe3\x07|\xec\xec\xa9" +
	"\xf8\xd2]Z\xf4\xf02\xb0\xff\x89smJ\xb9r\xf8" +
	"F\xe8\x1b\x00\xaao\xc9\xb4:E\x14\x00u\x92D\xd5" +
	"B\xfe\xa5\x13\xd8:;\x16x\xf6k\xc0%\x13`\xdf" +
	"9\x18u*\x98\xf3R\x1e?4\xe8\x97\xf1\xde\xe5\x99" +
	"\x12<\xe3\xab;\xfb{^\x9d\x1eY\xc4\x83\xf4\x91\x8b" +
	"\xae\xca\xb4Om\x16<\xc6\xcd\x19<q{\xdf\xe8\xa2" +
	"\xe5jz_\xad\x13\xcb\xb54\xaa\xc6\xc5\xf2\x8e\x9f\x9b" +
	"{\x9e\xec\xfa\xfc\x06\xd8&O\x94FOqQ\xdb\x0a" +
	"?^\xbf\xf3i\xf0\x1d\xf8\xccWS\x91M\x1d\xe5\xa2" +
	"\xce\x8fV\xb5\x1d\xdf\xdf<\xed\xf3c\xf09u\xce\xcd" +
	"\xcc\x8d\xa5\x9f\xd2\xd9E\x0a\x8e\xd0aW\xa4\xaa\xd1\xa8" +
	"zV(\xf8\xfaz\xc4\xdc\x1b\x8d\xffp\x15\xb8\xe6u" +
	"\xda\xc9yL\xc13\xb1\xd1z~\xeb\xc3\xee9`k" +
	"\xe6\x17\xfai\x88/\x0c\xd1\x08\x1cs\xd2\x86\x9d\x0e\xb7" +
	"\xe8)\x92LU\x1d\xd4S\xb5V\xbb\xdd\xe4\xfe\x94H" +
	"\x94\xc4tK'\xa6\xadQB\x01(\x02\xb0@1\x80" +
	"V@P+\x92Pi\xd1S\x18\xa2\x04\x10C\x80y" +
	"H\xb1x\xb2=\xd6\x95l\x0f\x1b-\x1d]\x0d\x19\xb3" +
	"\xa4\xd1\xb03J\"\x9d\x07\x15\xcaAa\x12e\x90P" +
	"\xf6\xc1H>\x98\x98\xd5u&\xae\xb4\x1aV\x0cQ\xa3" +
	"D\xf6e\x8f^\x04\x8c\xd5\x83\xc4\x0a\x15'\x95\xfd\x08" +
	"\x00j0\x86\xb8\xb2EO\xd8\xb2[\xb6\x91h[R" +
	"~YN~\x90/!\xcbU\x0d\x10\x99\xcf\x0bz\x98" +
	"\x11\x17\x94\xdb(\x106\xbcG\x84^\xc1Yy\x19H" +
	"\xacT\xc1\\G\xd0\xab8[\xcfg\x01%\xc8\x95\xd7" +
	"\xb8\xac\xf9\x169\xd1\xd1\xb4e\xe8[L\x8f\xc7\x8d\xcb" +
	"\xeb\x01&\xef=\xee\xae\xbczr\x881\x8e%+\xc1" +
	"T\xc6\xee\xc8\x07\xa1\x0b\x93o5\xac\xb0\x97*\xef\x84" +
	"\xa2\x9b\xf6\xca\xe7^\xa28+_{\xc9\xd4\xb3(y" +
	"\xee\x04\x95\xc2\x95\xcd{\xf3\x1e\x1bB\xf6\x1f\x87\xb1\x03" +
	"\xc2[OV\xce\xbf\xd8k4\xec`f\xc1\xa5\xeb\x01" +
	"\xb4U\x04\xb5u\x12\xfa\xdb\x85,\xf7X\x17\x1c\x9cx" +
	"w\x10g\x08\xf3\x8c\x85\x1b\x13\x97\xadP\xab\x9e\xd61" +
	"\x00\x12\x06\x00\xff\x06\x00\x00\xff\xff\xfe*\x86\xac"

func init() {
	schemas.Register(schema_ef12a34b9807e19c,
		0x80087e4e698768a2,
		0x85ddfd96db252600,
		0x95b6142577e93239,
		0x96fbc50dc2f0200d,
		0x9746cc05cbff1132,
		0xb86bce7f916a10cc,
		0xbb3ca85b01eea465,
		0xd4e835c17f1ef32c,
		0xd797e0a99edf0921,
		0xe2553e5a663abb7d,
		0xf004c474c2f8ee7a,
		0xf269473b6db8d0eb,
		0xf838dca6c8721bdb)
}
